name: Deploy to Production

on:
  
  workflow_dispatch:

# Minimal required permissions
permissions:
  contents: read
  deployments: write
  pull-requests: write
  id-token: write # Needed for auth with Cloudflare

# Prevent concurrent deployments
concurrency:
  group: deploy-production
  cancel-in-progress: true

jobs:
  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Create test environment file
        run: |
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}" >> .env
          echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" >> .env

      - name: Run tests with coverage
        run: npm test

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage
          retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Check for hardcoded secrets
        run: |
          if grep -r -i "password\|secret\|token\|key" src/ --exclude-dir=node_modules | grep -v "\.d\.ts" | grep -v "console\.log"; then
            echo "⚠️ Potential hardcoded secrets found. Please review."
            exit 1
          else
            echo "✅ No obvious hardcoded secrets found"
          fi

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Create production environment file
        run: |
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}" >> .env
          echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" >> .env

      - name: Build project
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
          retention-days: 1

  deploy:
    name: Deploy to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: production
      url: https://10xcards.pl
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Publish to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: 10xcards
          directory: dist
          branch: main
          wranglerVersion: '3'

  notify:
    name: Notify about deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Check deployment status
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ Deployment to production completed successfully!"
          echo "You can view the site at: https://10xcards.pl"

      - name: Notify about failure
        if: needs.deploy.result != 'success'
        run: |
          echo "❌ Deployment to production failed!"
          echo "Please check the workflow logs for more details."
